AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: POC

Parameters:
  AppName:
    Type: String
    Default: hkb-poc

  ApiStageName:
    Type: String
    Default: Prod

  BucketName:
    Type: String
    Default: miap-pocjason-ap-southeast-1

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    Timeout: 3

Resources:
  UserIdentityPoolAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
      Policies:
        - PolicyName: CognitoIdentity
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: cognito-identity:*
                Effect: Allow
                Resource: '*'
        - PolicyName: IoTPrincipalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - s3:GetObject
                - iot:AttachPrincipalPolicy
                - iot:DescribeEndpoint
                Effect: Allow
                Resource: '*'
        - PolicyName: S3BucketActionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - s3:PutObject
                - s3:DeleteObject
                Effect: Allow
                Resource: !Sub
                  - arn:aws:s3:::${Bukcket}/public/*
                  - Bukcket: !Ref BucketName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
              Service:
                - iot.amazonaws.com
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref UserIdentityPool
              'ForAnyValue:StringLike':
                cognito-identity.amazonaws.com:amr: authenticated

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserPoolName: !Join ['_', [!Ref AppName, 'UserPool']]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - AttributeDataType: String
          Mutable: false
          Required: true
          Name: email

  UserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: WebClient
        GenerateSecret: false
        UserPoolId: !Ref UserPool

  UserIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join ['_', [!Ref AppName, 'UserIdentityPool']]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolWebClient
          ProviderName: !GetAtt UserPool.ProviderName

  UserIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref UserIdentityPool
      Roles:
        authenticated: !GetAtt UserIdentityPoolAuthenticatedRole.Arn

  # API Gateway
  # Api:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: !Ref ApiStageName
  #     Cors:
  #       AllowMethods: "'*'"
  #       AllowHeaders: "'*'"
  #       AllowOrigin: "'*'"
  #     Auth:
  #       Authorizers:
  #         CognitoAuthorizer:
  #           UserPoolArn: !GetAtt UserPool.Arn

Outputs:
  Region:
    Value: !Ref AWS::Region

  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserPoolId']]

  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserPoolArn']]

  UserPoolWebClientId:
    Value: !Ref UserPoolWebClient
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserPoolWebClientId']]
  
  UserIdentityPoolId:
    Value: !Ref UserIdentityPool
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserIdentityPoolId']]

  # ApiId:
  #   Value: !Ref Api

  # ApiHost:
  #   Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}

  WebBucketName:
    Value: !Ref BucketName
