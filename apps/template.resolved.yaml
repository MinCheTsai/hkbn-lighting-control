AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: develop

  AppName:
    Type: String
    Default: hkb-poc

  ApiStageName:
    Type: String
    Default: Prod

  BucketName:
    Type: String
    Default: s3.bucket

  UserEmail:
    Type: String
    Default: poke@softchef.com

  UserPassword:
    Type: String
    Default: '52657055'

  CalculateConsumeInterval:
    Type: Number
    Default: 15

Conditions:
  CreateProdResources: !Equals [ !Ref Environment, production ]

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    Timeout: 12

Resources:
  UserIdentityPoolAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
      Policies:
        - PolicyName: CognitoIdentity
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: cognito-identity:*
                Effect: Allow
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
              Service:
                - iot.amazonaws.com
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref UserIdentityPool
              'ForAnyValue:StringLike':
                cognito-identity.amazonaws.com:amr: authenticated

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserPoolName: !Join ['_', [!Ref AppName, 'UserPool']]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - AttributeDataType: String
          Mutable: false
          Required: true
          Name: email

  UserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: WebClient
        GenerateSecret: false
        UserPoolId: !Ref UserPool

  UserIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join ['_', [!Ref AppName, 'UserIdentityPool']]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolWebClient
          ProviderName: !GetAtt UserPool.ProviderName

  UserIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref UserIdentityPool
      Roles:
        authenticated: !GetAtt UserIdentityPoolAuthenticatedRole.Arn

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ses:*
              Resource: '*'
        - PolicyName: DynamoDbPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
              Resource: '*'
        - PolicyName: CloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                Resource: '*'
        - PolicyName: LambdaPermissonPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: '*'

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  NotificateScheduleChangeFunction:
    Type: AWS::Serverless::Function
    Condition: CreateProdResources
    Properties:
      CodeUri: dists/schedule/notice
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        SwitchLightsByGroup:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/notice
            Method: post

  GroupLightsSwitchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/group/light-switch
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        SwitchLightsByGroup:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /group/light-switch/{switch}
            Method: post
      Environment:
        Variables:
          TOKEN_EMAIL: !Ref UserEmail
          TOKEN_PASSWORD: !Ref UserPassword

  CreateGroupScheduleFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/create
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        CreateGroupSchedule:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}
            Method: post
      Environment:
        Variables:
          GroupLightsSwitchFunction_ARN: !GetAtt GroupLightsSwitchFunction.Arn

  UpdateGroupScheduleFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/update
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        UpdateGroupSchedule:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}
            Method: put
      Environment:
        Variables:
          GroupLightsSwitchFunction_ARN: !GetAtt GroupLightsSwitchFunction.Arn

  DeleteGroupScheduleFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/delete
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        DeleteGroupSchedule:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}
            Method: delete
      Environment:
        Variables:
          GroupLightsSwitchFunction_ARN: !GetAtt GroupLightsSwitchFunction.Arn

  ListGroupSchedulesFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/get-list
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        ListGroupSchedules:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}
            Method: get

  GetGroupScheduleTargetFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/get-target
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        GetGroupScheduleTarget:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}/{ruleid}
            Method: get

  ChangeGroupScheduleStateFunction:
    DependOn: GroupLightsSwitchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/schedule/group/switch
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        ChangeGroupScheduleState:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /schedule/group/{uid}/{ruleid}
            Method: put

  ConsumeEnergyDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: mac
        AttributeType: S
      - AttributeName: uid
        AttributeType: S
      - AttributeName: lastUpdated
        AttributeType: N
      KeySchema:
      - AttributeName: mac
        KeyType: HASH
      - AttributeName: uid
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: query-by-uid
        KeySchema:
        - AttributeName: uid
          KeyType: HASH
        - AttributeName: lastUpdated
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CalculateConsumeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/calculate
      Role: !GetAtt LambdaFunctionRole.Arn
      Environment:
        Variables:
          TOKEN_EMAIL: !Ref UserEmail
          TOKEN_PASSWORD: !Ref UserPassword
          DATAPOOL_TABLE_NAME: !Ref ConsumeEnergyDataTable
          INTERVAL_TIME: !Ref CalculateConsumeInterval

  CalculateConsumeScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calculate energy used "
      ScheduleExpression: !Sub
        - cron(0/${Interval} * * * ? *)
        - { Interval: !Ref CalculateConsumeInterval }
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CalculateConsumeFunction.Arn
          Id: "HDCFV1"

  PermissionForCalculateConsumeScheduleToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref CalculateConsumeFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CalculateConsumeScheduleRule.Arn

  GetGroupConsumeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dists/group/get-consume
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        GetGroupConsume:   
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /group/get-consume/{uid}
            Method: post
      Environment:
        Variables:
          DATAPOOL_TABLE_NAME: !Ref ConsumeEnergyDataTable

Outputs:
  DataPoolTable:
    Value: !Ref ConsumeEnergyDataTable

  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserPoolId']]

  IdentityPoolId:
    Value: !Ref UserIdentityPool
    Export:
      Name: !Join ['-', [ !Ref AppName, 'IdentityPoolId']]

  UserPoolWebClientId:
    Value: !Ref UserPoolWebClient
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserPoolWebClientId']]
  
  UserIdentityPoolId:
    Value: !Ref UserIdentityPool
    Export:
      Name: !Join ['-', [ !Ref AppName, 'UserIdentityPoolId']]

  ApiId:
    Value: !Ref Api

  ApiHost:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}

  GroupLightsSwitchFunction:
    Value: !GetAtt GroupLightsSwitchFunction.Arn

  WebBucketName:
    Value: !Ref BucketName
